const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const compression = require('compression')

const proxy = require('./proxy/server')
const bodyParser = require('body-parser')
const cookieParser = require('cookie-parser')
const querystring = require('querystring')
const auth = require('./middleware/auth')
const {isProd,isLocal, baseUrl,APPNAME} = require('./env_config.js')
const util = require('./src/server/util')

const resolve = file => path.resolve(__dirname, file)
const {createBundleRenderer} = require('vue-server-renderer')

const useMicroCache = false;//process.env.MICRO_CACHE !== 'false'
const app = express()

const template = fs.readFileSync(resolve('./src/index.template.html'), 'utf-8')

function createRenderer(bundle, options) {
    // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    return createBundleRenderer(bundle, Object.assign(options, {
        template,
        // for component caching
        cache: LRU({
            max: 1000,
            maxAge: 1000 * 60 * 15
        }),
        // this is only needed when vue-server-renderer is npm-linked
        basedir: resolve('./dist'),
        // recommended for performance
        runInNewContext: false //默认是true,官方提醒false要谨慎使用
    }))
}

let renderer
let readyPromise
if (!isLocal) {
    // In production: create server renderer using built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const bundle = require('./dist/vue-ssr-server-bundle.json')
    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    const clientManifest = require('./dist/vue-ssr-client-manifest.json')
    renderer = createRenderer(bundle, {
        clientManifest
    })
    process.env.PORT = 7505
} else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
        renderer = createRenderer(bundle, options)
    })
}

const serve = (path, cache) => express.static(resolve(path), {
    maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.get(`/${APPNAME}/health`, (req, res) => {
    res.end(process.env.NODE_ENV)
})

app.get(`${baseUrl}health`, (req, res) => {
    res.end(process.env.NODE_ENV)
})

app.use(bodyParser())
app.use(cookieParser())
app.use(compression({threshold: 0}))

// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
    max: 100,
    maxAge: 1000
})

// TODO代理信息
proxy(app)


// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
const isCacheable = req => useMicroCache

function render(req, res) {
    if(!renderer){
        return res.end('waiting for compilation... refresh in a moment.')
    }

    const s = Date.now()

    res.setHeader("Content-Type", "text/html")

    const handleError = err => {
        if (err.url) {
            res.redirect(baseUrl.slice(0,baseUrl.length-1)+err.url)
        } else if (err.code === 404) {
            res.status(404).end('404 | Page Not Found')
        } else {
            // Render Error Page or Redirect
            res.status(500).end('500 | Internal Server Error')
            console.error(`error during render : ${req.url}`)
            console.error(err.stack)
        }
    }

    const cacheable = isCacheable(req)
    if (cacheable) {
        const hit = microCache.get(req.url)
        if (hit) {
            if (!isProd) {
                console.log(`cache hit!`)
            }
            return res.end(hit)
        }
    }


    const context = {
        title: '同程旅游', // default title
        url: req.url.replace(baseUrl,'/'),
        cookies: req.cookies,
        res: res
    }
    //console.log('context = ' + JSON.stringify(context))
    if(req.url.match('/favicon.ico|/flight/json/getwechatjsapisha.html')){
        //todo
    }else{
        renderer.renderToString(context, (err, html) => {
            if (err) {
                return handleError(err)
            }
            res.end(html)
            if (cacheable) {
                microCache.set(req.url, html)
            }
            if (!isProd) {
                console.log(`whole request: ${Date.now() - s}ms`)
            }
        })
    }
}

app.use(`${baseUrl}dist`, serve('./dist', true))
if(process.env.NODE_ENV) {
    app.use(auth())
}
app.get(`${baseUrl}*`,render)

const port = process.env.PORT || 8080
app.listen(port, () => {
    console.log(`server started at localhost:${port}`)
})
